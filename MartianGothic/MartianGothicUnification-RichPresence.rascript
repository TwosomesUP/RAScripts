// Martian Gothic: Unification
// #ID = 16570
// BacklogOddy
// Rich Presence Script

// Classes

class Player {
    character = byte(0x10ccae)
}

class Map {
    id = byte(0x10b5d4)
}

class InventoryOffsets {
    name = 0x8
    count = 0x10
}

class Inventory {
    type = byte(0x1365b8)
    state = byte(0x1365dc)
    index = byte(0x1365b9)
    items = byte(0x1365ab)

    start = 0x1365e0
    slots = 18
    slotSize = 56
    size = slots * slotSize

    offsets = InventoryOffsets()

    function IsOpen() {
        return this.state != 0
    }
    
    function IsBrowsingStorage(){
        return this.type == 8
    }
    
    function GetSelectedItem() {
        startAddress = this.start + (this.size * game.player.character)
        slotAddress = startAddress + (this.index * this.slotSize)
        itemAddress = slotAddress + this.offsets.name
        return word(itemAddress)
    }

    function GetSelectedItemCount() {
        startAddress = this.start + (this.size * game.player.character)
        slotAddress = startAddress + (this.index * this.slotSize)
        itemAddress = slotAddress + this.offsets.count
        return byte(itemAddress)
    }
}

class Storage {
    infoBase = 0x1373e0
    storageBase = 0x137688
    slotSize = 56

    infoIndex = byte(0x10f578)
    infoOffset = infoIndex * 2
    
    objectIndexAddress = infoBase + infoOffset
    objectIndex = word(objectIndexAddress)
    
    objectCountAddress = objectIndexAddress + 0x154
    objectCount = word(objectCountAddress)
    objectOffset = objectIndex * slotSize
    
    objectBase = storageBase + objectOffset
    
    function IsOpen(){
        return this.infoIndex != 0xff
    }
    
    function GetSelectedItem(prevIndex = false){
        index = game.inventory.index
        if (prevIndex)
            index = prev(index)
    
        slotAddress = this.objectBase + (index * game.inventory.slotSize)
        itemAddress = slotAddress + game.inventory.offsets.name
        return word(itemAddress)
    }
    
    function GetSplitAddress(){
        base1 = this.objectIndexAddress - 0x130000
        b0 = base1 - (base1 / 256) * 256 
        b1 = base1 / 256
        
        base2 = this.objectCountAddress - 0x130000
        b2 = base2 - (base2 / 256) * 256 
        b3 = base2 / 256
        
        base3 = this.objectBase - 0x130000
        b4 = base3 - (base3 / 256) * 256 
        b5 = base3 / 256
        
        return [b1, b0, b3, b2, b5, b4]
    }
    
    function CollectedItem(id){
        return this.IsOpen() && game.inventory.IsOpen() && 
            prev(this.GetSelectedItem()) == id && 
            this.GetSelectedItem() != id &&
            prev(game.inventory.items) < game.inventory.items
    }
}

class Time {
    hours = 0
    minutes = 0
    seconds = 0
}

class Timer {
    hours = byte(0x10ccc0)
    minutes = byte(0x10ccc1)
    seconds = byte(0x10ccc2)

    function GetTimeInSeconds(){
        return this.hours * 3600 + this.minutes * 60 + this.seconds
    }
}

class Game {
    player = Player()
    map = Map()
    inventory = Inventory()
    storage = Storage()
    timer = Timer()
}

// Lookups

class Lookups {
    character = {
        0: "Karne",
        1: "Kenzo",
        2: "Matlock"
    }

    map = {
        0x00: "0x00", 0x01: "MOOD Antichamber", 0x02: "Boulevard St. Michel 1", 0x03: "Boulevard St. Michel 2", 0x04: "Madison Avenue 3", 0x05: "Madison Avenue 1", 0x06: "Madison Avenue 2", 0x07: "0x07", 0x08: "Med Lab", 0x09: "0x09",
        0x0a: "0x0a", 0x0b: "0x0b", 0x0c: "0x0c", 0x0d: "0x0d", 0x0e: "0x0e", 0x0f: "0x0f", 0x10: "0x10", 0x11: "State Street 1", 0x12: "0x12", 0x13: "0x13",
        0x14: "0x14", 0x15: "Time Square 2", 0x16: "Time Square 1", 0x17: "Baker Street", 0x18: "Piccadilly Circus 1", 0x19: "Piccadilly Circus 2", 0x1a: "Sterile Room 1", 0x1b: "Broadway 3", 0x1c: "Shuttle Bay", 0x1d: "Shuttle Bay Entrance",
        0x1e: "Power Core", 0x1f: "0x1f", 0x20: "0x20", 0x21: "Broadway 4", 0x22: "Wall Street 1", 0x23: "Wall Street 2", 0x24: "0x24", 0x25: "Broadway 5", 0x26: "0x26", 0x27: "0x27",
        0x28: "0x28", 0x29: "0x29", 0x2a: "Director's Quarters", 0x2b: "0x2b", 0x2c: "Penny Lane 1", 0x2d: "Sunset Boulevard 1", 0x2e: "0x2e", 0x2f: "Arboretum 1", 0x30: "Park Lane 2", 0x31: "Park Lane 1",
        0x32: "Inocashira Douri 2", 0x33: "Inocashira Douri 1", 0x34: "State Street 2", 0x35: "Broadway 2", 0x36: "Broadway 1", 0x37: "Decontamination Room 3", 0x38: "Airlock 3", 0x39: "Gymnasium", 0x3a: "0x3a", 0x3b: "0x3b",
        0x3c: "MOOD Chamber", 0x3d: "Recreation Room", 0x3e: "0x3e", 0x3f: "Chem Lab", 0x40: "0x40", 0x41: "0x41", 0x42: "0x42", 0x43: "Decontamination Room 2", 0x44: "Airlock 2", 0x45: "0x45",
        0x46: "0x46", 0x47: "Washroom", 0x48: "0x48", 0x49: "Study", 0x4a: "Dorm #1", 0x4b: "0x4b", 0x4c: "Decontamination Room 1", 0x4d: "Airlock 1", 0x4e: "Air Recycling Antichamber", 0x4f: "Air Recycling Center",
        0x50: "0x50", 0x51: "0x51", 0x52: "0x52", 0x53: "0x53", 0x54: "0x54", 0x55: "0x55", 0x56: "0x56", 0x57: "0x57", 0x58: "0x58", 0x59: "Simureal Chamber",
        0x5a: "0x5a", 0x5b: "0x5b", 0x5c: "Arboretum 2", 0x5d: "Arboretum 3", 0x5e: "0x5e", 0x5f: "0x5f", 0x60: "0x60", 0x61: "0x61", 0x62: "0x62", 0x63: "0x63",
        0x64: "0x64", 0x65: "0x65", 0x66: "0x66", 0x67: "0x67", 0x68: "0x68", 0x69: "0x69", 0x6a: "0x6a", 0x6b: "0x6b", 0x6c: "0x6c", 0x6d: "0x6d",
        0x6e: "0x6e", 0x6f: "0x6f", 0x70: "0x70", 0x71: "0x71", 0x72: "0x72", 0x73: "0x73", 0x74: "Character's Met - Game Over", 0x75: "0x75", 0x76: "0x76", 0x77: "0x77",
        0x78: "0x78", 0x79: "Inocashira Douri 3", 0x7a: "0x7a", 0x7b: "0x7b", 0x7c: "0x7c", 0x7d: "0x7d", 0x7e: "0x7e", 0x7f: "0x7f", 0x80: "0x80", 0x81: "0x81",
        0x82: "0x82", 0x83: "0x83", 0x84: "0x84", 0x85: "0x85", 0x86: "0x86", 0x87: "0x87", 0x88: "0x88", 0x89: "0x89", 0x8a: "0x8a", 0x8b: "0x8b",
        0x8c: "0x8c", 0x8d: "0x8d", 0x8e: "0x8e", 0x8f: "0x8f", 0x90: "0x90", 0x91: "0x91", 0x92: "0x92", 0x93: "0x93", 0x94: "0x94", 0x95: "0x95",
        0x96: "0x96", 0x97: "0x97", 0x98: "0x98", 0x99: "0x99", 0x9a: "0x9a", 0x9b: "0x9b", 0x9c: "0x9c", 0x9d: "0x9d", 0x9e: "0x9e", 0x9f: "0x9f",
        0xa0: "0xa0", 0xa1: "0xa1", 0xa2: "0xa2", 0xa3: "0xa3", 0xa4: "0xa4", 0xa5: "0xa4", 0xa6: "0xa6", 0xa7: "0xa7", 0xa8: "0xa8", 0xa9: "0xa9",
        0xaa: "0xaa", 0xab: "0xab", 0xac: "0xac", 0xad: "0xad", 0xae: "0xae", 0xaf: "0xaf", 0xb0: "0xb0", 0xb1: "0xb1", 0xb2: "0xb2", 0xb3: "0xb3",
        0xb4: "0xb4", 0xb5: "0xb5", 0xb6: "0xb6", 0xb7: "0xb7", 0xb8: "0xb8", 0xb9: "0xb9", 0xba: "0xba", 0xbb: "0xbb", 0xbc: "0xbc", 0xbd: "0xbd",
        0xbe: "0xbe", 0xbf: "0xbf", 0xc0: "0xc0", 0xc1: "0xc1", 0xc2: "0xc2", 0xc3: "0xc3", 0xc4: "0xc4", 0xc5: "0xc5", 0xc6: "0xc6", 0xc7: "0xc7",
        0xc8: "0xc8", 0xc9: "0xc9", 0xca: "0xca", 0xcb: "0xcb", 0xcc: "0xcc", 0xcd: "0xcd", 0xce: "0xce", 0xcf: "0xcf", 0xd0: "0xd0", 0xd1: "0xd1",
        0xd2: "0xd2", 0xd3: "0xd3", 0xd4: "0xd4", 0xd5: "0xd5", 0xd6: "0xd6", 0xd7: "0xd7", 0xd8: "0xd8", 0xd9: "0xd9", 0xda: "0xda", 0xdb: "0xdb",
        0xdc: "0xdc", 0xdd: "0xdd", 0xde: "0xde", 0xdf: "0xdf", 0xe0: "0xe0", 0xe1: "0xe1", 0xe2: "0xe2", 0xe3: "0xe3", 0xe4: "0xe4", 0xe5: "0xe5",
        0xe6: "0xe6", 0xe7: "0xe7", 0xe8: "0xe8", 0xe9: "0xe9", 0xea: "0xea", 0xeb: "0xeb", 0xec: "0xec", 0xed: "0xed", 0xee: "0xee", 0xef: "0xef",
        0xf0: "0xf0", 0xf1: "0xf1", 0xf2: "0xf2", 0xf3: "0xf3", 0xf4: "0xf4", 0xf5: "0xf5", 0xf6: "0xf6", 0xf7: "0xf7", 0xf8: "0xf8", 0xf9: "0xf9",
        0xfa: "0xfa", 0xfb: "0xfb", 0xfc: "0xfc", 0xfd: "0xfd", 0xfe: "0xfe", 0xff: "0xff"
    }

    item = {
        0x00: "0x00", 0x01: "0x01", 0x02: "0x02", 0x03: "0x03", 0x04: "0x04 Microcorder (Felicci)", 0x05: "0x05", 0x06: "0x06", 0x07: "0x07", 0x08: "0x08", 0x09: "0x09",
        0x0a: "0x0a", 0x0b: "0x0b", 0x0c: "0x0c", 0x0d: "0x0d", 0x0e: "0x0e", 0x0f: "0x0f", 0x10: "0x10 Radio", 0x11: "0x11", 0x12: "0x12 Microcorder (Andrew Muir)", 0x13: "0x13 Photo (Kenzo)",
        0x14: "0x14 Scarab", 0x15: "0x15", 0x16: "0x16", 0x17: "0x17 Book (Lords of Egypt)", 0x18: "0x18 Note (Babybug)", 0x19: "0x19", 0x1a: "0x1a Biosensor (Matlock)", 0x1b: "0x1b", 0x1c: "0x1c", 0x1d: "0x1d Flask",
        0x1e: "0x1e Brown Herbs", 0x1f: "0x1f", 0x20: "0x20", 0x21: "0x21", 0x22: "0x22 Gloves", 0x23: "0x23", 0x24: "0x24", 0x25: "0x25", 0x26: "0x26", 0x27: "0x27",
        0x28: "0x28", 0x29: "0x29", 0x2a: "0x2a", 0x2b: "0x2b", 0x2c: "0x2c", 0x2d: "0x2d", 0x2e: "0x2e", 0x2f: "0x2f", 0x30: "0x30", 0x31: "0x31 Electronic Screwdriver",
        0x32: "0x32", 0x33: "0x33", 0x34: "0x34", 0x35: "0x35 Hacksaw", 0x36: "0x36", 0x37: "0x37", 0x38: "0x38", 0x39: "0x39", 0x3a: "0x3a Drive Belt", 0x3b: "0x3b",
        0x3c: "0x3c Lighter", 0x3d: "0x3d Cigarettes", 0x3e: "0x3e Watch", 0x3f: "0x3f Satsuma", 0x40: "0x40 Nicotine Patch", 0x41: "0x41 Contact Lense", 0x42: "0x42 Lipstick", 0x43: "0x43 Booklet", 0x44: "0x44 Photo (Matlock)", 0x45: "0x45 Letter",
        0x46: "0x46 Silver Bullet", 0x47: "0x47 Wrapper", 0x48: "0x48 Brown Tag", 0x49: "0x49", 0x4a: "0x4a", 0x4b: "0x4b", 0x4c: "0x4c Oily Rag", 0x4d: "0x4d", 0x4e: "0x4e Blue Tag", 0x4f: "0x4f Green Tag (Dorm 1)",
        0x50: "0x50", 0x51: "0x51 Yellow Tag", 0x52: "0x52 Orange Tag", 0x53: "0x53 Purple Tag", 0x54: "Gray Tag", 0x55: "0x55", 0x56: "0x56", 0x57: "0x57", 0x58: "0x58", 0x59: "0x59",
        0x5a: "0x5a Pop-gun", 0x5b: "0x5b Piccolo", 0x5c: "0x5c", 0x5d: "0x5d", 0x5e: "0x5e Nail Gun", 0x5f: "0x5f", 0x60: "0x60 Weed Killer Spray-Gun", 0x61: "0x61", 0x62: "0x62 Martian Rock", 0x63: "0x63",
        0x64: "0x64", 0x65: "0x65", 0x66: "0x66 Receptor Panel", 0x67: "0x67", 0x68: "0x68", 0x69: "0x69", 0x6a: "0x6a Flask (Nitroglycerine)", 0x6b: "0x6b Spray Cartridge (Acid)", 0x6c: "0x6c Piccolo Ammo", 0x6d: "0x6d",
        0x6e: "0x6e", 0x6f: "0x6f Vibro-Scourer", 0x70: "0x70", 0x71: "0x71", 0x72: "0x72", 0x73: "Severed Hand", 0x74: "0x74", 0x75: "0x75 Biosensor", 0x76: "0x76 Paperclip", 0x77: "0x77 Note",
        0x78: "0x78", 0x79: "0x79 Silver Bell", 0x7a: "0x7a", 0x7b: "0x7b", 0x7c: "0x7c Baby Bug", 0x7d: "0x7d Babybug Remote", 0x7e: "0x7e", 0x7f: "0x7f", 0x80: "0x80", 0x81: "0x81 Dillinger Ammo",
        0x82: "0x82", 0x83: "0x83 Antitoxin", 0x84: "0x84 Health Boost", 0x85: "0x85 Lichen", 0x86: "0x86", 0x87: "0x87", 0x88: "0x88", 0x89: "0x89", 0x8a: "0x8a", 0x8b: "0x8b",
        0x8c: "0x8c", 0x8d: "0x8d", 0x8e: "0x8e Green Tag (Dorm 2)", 0x8f: "0x8f", 0x90: "0x90 Green Tag (Dorm 4)", 0x91: "0x91", 0x92: "0x92", 0x93: "0x93 Passcode (Arboretum)", 0x94: "0x94", 0x95: "0x95",
        0x96: "0x96", 0x97: "0x97", 0x98: "0x98", 0x99: "0x99", 0x9a: "0x9a", 0x9b: "0x9b", 0x9c: "0x9c", 0x9d: "0x9d", 0x9e: "0x9e", 0x9f: "0x9f Deflated Mars Hopper",
        0xa0: "0xa0 Desk Key", 0xa1: "0xa1 Spray Cartridge (Empty)", 0xa2: "0xa2 Respirator", 0xa3: "0xa3 Bicycle Pump", 0xa4: "0xa4", 0xa5: "Notes (Pickman)", 0xa6: "0xa6", 0xa7: "0xa7 Green Tag", 0xa8: "0xa8 Study Drawer Key", 0xa9: "0xa9",
        0xaa: "0xaa", 0xab: "0xab", 0xac: "0xac", 0xad: "0xad", 0xae: "0xae", 0xaf: "0xaf", 0xb0: "0xb0", 0xb1: "0xb1", 0xb2: "0xb2", 0xb3: "0xb3 Key (MED)",
        0xb4: "0xb4", 0xb5: "0xb5", 0xb6: "0xb6", 0xb7: "0xb7", 0xb8: "0xb8", 0xb9: "0xb9", 0xba: "0xba", 0xbb: "0xbb", 0xbc: "0xbc", 0xbd: "0xbd",
        0xbe: "0xbe", 0xbf: "0xbf", 0xc0: "0xc0", 0xc1: "0xc1", 0xc2: "0xc2", 0xc3: "0xc3", 0xc4: "0xc4", 0xc5: "0xc5", 0xc6: "0xc6", 0xc7: "0xc7",
        0xc8: "0xc8", 0xc9: "0xc9", 0xca: "0xca", 0xcb: "0xcb", 0xcc: "0xcc", 0xcd: "0xcd", 0xce: "0xce", 0xcf: "0xcf", 0xd0: "0xd0", 0xd1: "0xd1",
        0xd2: "0xd2", 0xd3: "0xd3 Nails", 0xd4: "0xd4 Checker", 0xd5: "0xd5", 0xd6: "0xd6", 0xd7: "0xd7", 0xd8: "0xd8", 0xd9: "0xd9", 0xda: "0xda", 0xdb: "0xdb",
        0xdc: "0xdc", 0xdd: "0xdd", 0xde: "0xde", 0xdf: "0xdf", 0xe0: "0xe0", 0xe1: "0xe1", 0xe2: "0xe2", 0xe3: "0xe3", 0xe4: "0xe4", 0xe5: "0xe5",
        0xe6: "0xe6", 0xe7: "0xe7", 0xe8: "0xe8", 0xe9: "0xe9 Locker Key", 0xea: "0xea Bible", 0xeb: "0xeb Microcorder (Dieta Mentz)", 0xec: "0xec", 0xed: "0xed Note (Holmes)", 0xee: "0xee Microcorder (Andreivitch)", 0xef: "0xef Note (Ben Gunn #1)",
        0xf0: "0xf0", 0xf1: "0xf1 Microcorder (Tierney)", 0xf2: "0xf2 Note Suicide", 0xf3: "0xf3", 0xf4: "0xf4 Note (Alter)", 0xf5: "0xf5 Note (Power Core Request)", 0xf6: "0xf6", 0xf7: "Passcode (Downing Street)", 0xf8: "0xf8", 0xf9: "0xf9",
        0xfa: "0xfa", 0xfb: "0xfb", 0xfc: "0xfc", 0xfd: "0xfd", 0xfe: "0xfe", 0xff: "N/A",

        0x100: "0x100", 0x101: "0x101", 0x102: "0x102", 0x103: "0x103", 0x104: "0x104", 0x105: "Note (Ben Gunn #2)",
        0x106: "0x106", 0x107: "Note (Ben Gunn #4)", 0x108: "0x108", 0x109: "0x109", 0x10A: "0x10A", 0x10B: "0x10B",
        0x10C: "0x10C", 0x10D: "0x10D", 0x10E: "0x10E", 0x10F: "Microcorder (Luke Barton)", 0x110: "Microcorder (Nadja Kerenski)", 0x111: "Microcorder (Robert Seager)",
        0x112: "0x112", 0x113: "0x113", 0x114: "0x114", 0x115: "0x115", 0x116: "0x116", 0x117: "0x117",
        0x118: "0x118", 0x119: "0x119", 0x11A: "0x11A", 0x11B: "0x11B", 0x11C: "0x11C", 0x11D: "0x11D",
        0x11E: "0x11E", 0x11F: "0x11F", 0x120: "0x120", 0x121: "0x121", 0x122: "0x122", 0x123: "0x123",
        0x124: "0x124", 0x125: "0x125", 0x126: "0x126", 0x127: "0x127", 0x128: "0x128", 0x129: "0x129",
        0x12A: "0x12A", 0x12B: "0x12B", 0x12C: "0x12C", 0x12D: "0x12D", 0x12E: "0x12E", 0x12F: "0x12F",
        0x130: "0x130", 0x131: "0x131", 0x132: "0x132", 0x133: "0x133", 0x134: "0x134", 0x135: "0x135",
        0x136: "0x136", 0x137: "0x137", 0x138: "0x138", 0x139: "0x139", 0x13A: "0x13A", 0x13B: "0x13B",
        0x13C: "0x13C", 0x13D: "0x13D", 0x13E: "0x13E", 0x13F: "0x13F", 0x140: "0x140", 0x141: "0x141",
        0x142: "0x142", 0x143: "0x143", 0x144: "0x144", 0x145: "0x145", 0x146: "0x146", 0x147: "0x147",
        0x148: "0x148", 0x149: "0x149", 0x14A: "0x14A", 0x14B: "0x14B", 0x14C: "0x14C", 0x14D: "0x14D",
        0x14E: "0x14E", 0x14F: "0x14F", 0x150: "0x150", 0x151: "0x151", 0x152: "0x152", 0x153: "0x153",
        0x154: "0x154", 0x155: "0x155", 0x156: "0x156", 0x157: "0x157", 0x158: "0x158", 0x159: "0x159",
        0x15A: "0x15A", 0x15B: "0x15B", 0x15C: "0x15C", 0x15D: "0x15D", 0x15E: "0x15E", 0x15F: "0x15F",
        0x160: "0x160", 0x161: "0x161", 0x162: "0x162", 0x163: "0x163", 0x164: "0x164", 0x165: "0x165",
        0x166: "0x166", 0x167: "0x167", 0x168: "0x168", 0x169: "0x169", 0x16A: "0x16A", 0x16B: "0x16B",
        0x16C: "0x16C", 0x16D: "0x16D", 0x16E: "0x16E", 0x16F: "0x16F", 0x170: "0x170", 0x171: "0x171",
        0x172: "0x172", 0x173: "0x173", 0x174: "0x174", 0x175: "0x175", 0x176: "0x176", 0x177: "0x177",
        0x178: "0x178", 0x179: "0x179", 0x17A: "0x17A", 0x17B: "0x17B", 0x17C: "0x17C", 0x17D: "0x17D",
        0x17E: "0x17E", 0x17F: "0x17F", 0x180: "0x180", 0x181: "0x181", 0x182: "0x182", 0x183: "0x183",
        0x184: "0x184", 0x185: "0x185", 0x186: "0x186", 0x187: "0x187", 0x188: "0x188", 0x189: "0x189",
        0x18A: "0x18A", 0x18B: "0x18B", 0x18C: "0x18C", 0x18D: "0x18D", 0x18E: "0x18E", 0x18F: "0x18F",
        0x190: "0x190", 0x191: "0x191", 0x192: "0x192", 0x193: "0x193", 0x194: "0x194", 0x195: "0x195",
        0x196: "0x196", 0x197: "0x197", 0x198: "0x198", 0x199: "0x199", 0x19A: "0x19A", 0x19B: "0x19B",
        0x19C: "0x19C", 0x19D: "0x19D", 0x19E: "0x19E", 0x19F: "0x19F", 0x1A0: "0x1A0", 0x1A1: "0x1A1",
        0x1A2: "0x1A2", 0x1A3: "0x1A3", 0x1A4: "0x1A4", 0x1A5: "0x1A5", 0x1A6: "0x1A6", 0x1A7: "0x1A7",
        0x1A8: "0x1A8", 0x1A9: "0x1A9", 0x1AA: "0x1AA", 0x1AB: "0x1AB", 0x1AC: "0x1AC", 0x1AD: "0x1AD",
        0x1AE: "0x1AE", 0x1AF: "0x1AF", 0x1B0: "0x1B0", 0x1B1: "0x1B1", 0x1B2: "0x1B2", 0x1B3: "0x1B3",
        0x1B4: "0x1B4", 0x1B5: "0x1B5", 0x1B6: "0x1B6", 0x1B7: "0x1B7", 0x1B8: "0x1B8", 0x1B9: "0x1B9",
        0x1BA: "0x1BA", 0x1BB: "0x1BB", 0x1BC: "0x1BC", 0x1BD: "0x1BD", 0x1BE: "0x1BE", 0x1BF: "0x1BF",
        0x1C0: "0x1C0", 0x1C1: "0x1C1", 0x1C2: "0x1C2", 0x1C3: "0x1C3", 0x1C4: "0x1C4", 0x1C5: "0x1C5",
        0x1C6: "0x1C6", 0x1C7: "0x1C7", 0x1C8: "0x1C8", 0x1C9: "0x1C9", 0x1CA: "0x1CA", 0x1CB: "0x1CB",
        0x1CC: "0x1CC", 0x1CD: "0x1CD", 0x1CE: "0x1CE", 0x1CF: "0x1CF", 0x1D0: "0x1D0", 0x1D1: "0x1D1",
        0x1D2: "0x1D2", 0x1D3: "0x1D3", 0x1D4: "0x1D4", 0x1D5: "0x1D5", 0x1D6: "0x1D6", 0x1D7: "0x1D7",
        0x1D8: "0x1D8", 0x1D9: "0x1D9", 0x1DA: "0x1DA", 0x1DB: "0x1DB", 0x1DC: "0x1DC", 0x1DD: "0x1DD",
        0x1DE: "0x1DE", 0x1DF: "0x1DF", 0x1E0: "0x1E0", 0x1E1: "0x1E1", 0x1E2: "0x1E2", 0x1E3: "0x1E3",
        0x1E4: "0x1E4", 0x1E5: "0x1E5", 0x1E6: "0x1E6", 0x1E7: "0x1E7", 0x1E8: "0x1E8", 0x1E9: "0x1E9",
        0x1EA: "0x1EA", 0x1EB: "0x1EB", 0x1EC: "0x1EC", 0x1ED: "0x1ED", 0x1EE: "0x1EE", 0x1EF: "0x1EF",
        0x1F0: "0x1F0", 0x1F1: "0x1F1", 0x1F2: "0x1F2", 0x1F3: "0x1F3", 0x1F4: "0x1F4", 0x1F5: "0x1F5",
        0x1F6: "0x1F6", 0x1F7: "0x1F7", 0x1F8: "0x1F8", 0x1F9: "0x1F9", 0x1FA: "0x1FA", 0x1FB: "0x1FB",
        0x1FC: "0x1FC", 0x1FD: "0x1FD", 0x1FE: "0x1FE", 0x1FF: "0x1FF"
    }
    
    hex = {
        0x00: "00", 0x01: "01", 0x02: "02", 0x03: "03", 0x04: "04", 0x05: "05", 0x06: "06", 0x07: "07", 0x08: "08", 0x09: "09",
        0x0a: "0a", 0x0b: "0b", 0x0c: "0c", 0x0d: "0d", 0x0e: "0e", 0x0f: "0f", 0x10: "10", 0x11: "11", 0x12: "12", 0x13: "13",
        0x14: "14", 0x15: "15", 0x16: "16", 0x17: "17", 0x18: "18", 0x19: "19", 0x1a: "1a", 0x1b: "1b", 0x1c: "1c", 0x1d: "1d",
        0x1e: "1e", 0x1f: "1f", 0x20: "20", 0x21: "21", 0x22: "22", 0x23: "23", 0x24: "24", 0x25: "25", 0x26: "26", 0x27: "27",
        0x28: "28", 0x29: "29", 0x2a: "2a", 0x2b: "2b", 0x2c: "2c", 0x2d: "2d", 0x2e: "2e", 0x2f: "2f", 0x30: "30", 0x31: "31",
        0x32: "32", 0x33: "33", 0x34: "34", 0x35: "35", 0x36: "36", 0x37: "37", 0x38: "38", 0x39: "39", 0x3a: "3a", 0x3b: "3b",
        0x3c: "3c", 0x3d: "3d", 0x3e: "3e", 0x3f: "3f", 0x40: "40", 0x41: "41", 0x42: "42", 0x43: "43", 0x44: "44", 0x45: "45",
        0x46: "46", 0x47: "47", 0x48: "48", 0x49: "49", 0x4a: "4a", 0x4b: "4b", 0x4c: "4c", 0x4d: "4d", 0x4e: "4e", 0x4f: "4f",
        0x50: "50", 0x51: "51", 0x52: "52", 0x53: "53", 0x54: "54", 0x55: "55", 0x56: "56", 0x57: "57", 0x58: "58", 0x59: "59",
        0x5a: "5a", 0x5b: "5b", 0x5c: "5c", 0x5d: "5d", 0x5e: "5e", 0x5f: "5f", 0x60: "60", 0x61: "61", 0x62: "62", 0x63: "63",
        0x64: "64", 0x65: "65", 0x66: "66", 0x67: "67", 0x68: "68", 0x69: "69", 0x6a: "6a", 0x6b: "6b", 0x6c: "6c", 0x6d: "6d",
        0x6e: "6e", 0x6f: "6f", 0x70: "70", 0x71: "71", 0x72: "72", 0x73: "73", 0x74: "74", 0x75: "75", 0x76: "76", 0x77: "77",
        0x78: "78", 0x79: "79", 0x7a: "7a", 0x7b: "7b", 0x7c: "7c", 0x7d: "7d", 0x7e: "7e", 0x7f: "7f", 0x80: "80", 0x81: "81",
        0x82: "82", 0x83: "83", 0x84: "84", 0x85: "85", 0x86: "86", 0x87: "87", 0x88: "88", 0x89: "89", 0x8a: "8a", 0x8b: "8b",
        0x8c: "8c", 0x8d: "8d", 0x8e: "8e", 0x8f: "8f", 0x90: "90", 0x91: "91", 0x92: "92", 0x93: "93", 0x94: "94", 0x95: "95",
        0x96: "96", 0x97: "97", 0x98: "98", 0x99: "99", 0x9a: "9a", 0x9b: "9b", 0x9c: "9c", 0x9d: "9d", 0x9e: "9e", 0x9f: "9f",
        0xa0: "a0", 0xa1: "a1", 0xa2: "a2", 0xa3: "a3", 0xa4: "a4", 0xa5: "a5", 0xa6: "a6", 0xa7: "a7", 0xa8: "a8", 0xa9: "a9",
        0xaa: "aa", 0xab: "ab", 0xac: "ac", 0xad: "ad", 0xae: "ae", 0xaf: "af", 0xb0: "b0", 0xb1: "b1", 0xb2: "b2", 0xb3: "b3",
        0xb4: "b4", 0xb5: "b5", 0xb6: "b6", 0xb7: "b7", 0xb8: "b8", 0xb9: "b9", 0xba: "ba", 0xbb: "bb", 0xbc: "bc", 0xbd: "bd",
        0xbe: "be", 0xbf: "bf", 0xc0: "c0", 0xc1: "c1", 0xc2: "c2", 0xc3: "c3", 0xc4: "c4", 0xc5: "c5", 0xc6: "c6", 0xc7: "c7",
        0xc8: "c8", 0xc9: "c9", 0xca: "ca", 0xcb: "cb", 0xcc: "cc", 0xcd: "cd", 0xce: "ce", 0xcf: "cf", 0xd0: "d0", 0xd1: "d1",
        0xd2: "d2", 0xd3: "d3", 0xd4: "d4", 0xd5: "d5", 0xd6: "d6", 0xd7: "d7", 0xd8: "d8", 0xd9: "d9", 0xda: "da", 0xdb: "db",
        0xdc: "dc", 0xdd: "dd", 0xde: "de", 0xdf: "df", 0xe0: "e0", 0xe1: "e1", 0xe2: "e2", 0xe3: "e3", 0xe4: "e4", 0xe5: "e5",
        0xe6: "e6", 0xe7: "e7", 0xe8: "e8", 0xe9: "e9", 0xea: "ea", 0xeb: "eb", 0xec: "ec", 0xed: "ed", 0xee: "ee", 0xef: "ef",
        0xf0: "f0", 0xf1: "f1", 0xf2: "f2", 0xf3: "f3", 0xf4: "f4", 0xf5: "f5", 0xf6: "f6", 0xf7: "f7", 0xf8: "f8", 0xf9: "f9",
        0xfa: "fa", 0xfb: "fb", 0xfc: "fc", 0xfd: "fd", 0xfe: "fe", 0xff: "ff"
    }
}

// Globals

game = Game()
lookups = Lookups()

// Rich Presence Definitions

rich_presence_conditional_display(!game.inventory.IsOpen(), "{0} || Location: {1} || Time: {2}",
    rich_presence_lookup("Character", game.player.character, lookups.character),
    rich_presence_lookup("Location", game.map.id, lookups.map),
    rich_presence_value("Time", game.timer.GetTimeInSeconds(), "SECS_AS_MINS")
)

rich_presence_conditional_display(game.inventory.IsOpen() && !game.storage.IsOpen(), "{0} || Location: {1} || Time: {4} || Slot {2}: {3}",
    rich_presence_lookup("Character", game.player.character, lookups.character),
    rich_presence_lookup("Location", game.map.id, lookups.map),
    rich_presence_value("InventorySlot", game.inventory.index),
    rich_presence_lookup("InventoryItem", game.inventory.GetSelectedItem(), lookups.item),
    rich_presence_value("Time", game.timer.GetTimeInSeconds(), "SECS_AS_MINS")
)

// Debug RP definitions
debug = false
if (debug) {
    rich_presence_conditional_display(game.inventory.IsOpen() && game.storage.IsOpen() && !game.inventory.IsBrowsingStorage(), "{0} || Location: {1} || Time: {10} || SO Index: 0x13{4}{5} || SO Count: 0x13{6}{7} || SO Base: 0x13{8}{9} || Inventory Slot {2}: {3}",
        rich_presence_lookup("Character", game.player.character, lookups.character),
        rich_presence_lookup("Location", game.map.id, lookups.map),
        rich_presence_value("InventorySlot", game.inventory.index),
        rich_presence_lookup("InventoryItem", game.inventory.GetSelectedItem(), lookups.item),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[0], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[1], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[2], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[3], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[4], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[5], lookups.hex),
    rich_presence_value("Time", game.timer.GetTimeInSeconds(), "SECS_AS_MINS")
    )

    rich_presence_conditional_display(game.inventory.IsOpen() && game.storage.IsOpen() && game.inventory.IsBrowsingStorage(), "{0} || Location: {1} || Time: {10} ||  SO Index: 0x13{4}{5} || SO Count: 0x13{6}{7} || SO Base: 0x13{8}{9} || Storage Slot {2}: {3}",
        rich_presence_lookup("Character", game.player.character, lookups.character),
        rich_presence_lookup("Location", game.map.id, lookups.map),
        rich_presence_value("InventorySlot", game.inventory.index),
        rich_presence_lookup("InventoryItem", game.storage.GetSelectedItem(), lookups.item),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[0], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[1], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[2], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[3], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[4], lookups.hex),
        rich_presence_lookup("HexLookup", game.storage.GetSplitAddress()[5], lookups.hex),
    rich_presence_value("Time", game.timer.GetTimeInSeconds(), "SECS_AS_MINS")
    )
} else {
    rich_presence_conditional_display(game.inventory.IsOpen() && game.storage.IsOpen() && !game.inventory.IsBrowsingStorage(), "{0} || Location: {1} || Time: {4} ||  Inventory Slot {2}: {3}",
        rich_presence_lookup("Character", game.player.character, lookups.character),
        rich_presence_lookup("Location", game.map.id, lookups.map),
        rich_presence_value("InventorySlot", game.inventory.index),
        rich_presence_lookup("InventoryItem", game.inventory.GetSelectedItem(), lookups.item),
    rich_presence_value("Time", game.timer.GetTimeInSeconds(), "SECS_AS_MINS")
    )

    rich_presence_conditional_display(game.inventory.IsOpen() && game.storage.IsOpen() && game.inventory.IsBrowsingStorage(), "{0} || Location: {1} || Time: {4} ||  Storage Slot {2}: {3}",
        rich_presence_lookup("Character", game.player.character, lookups.character),
        rich_presence_lookup("Location", game.map.id, lookups.map),
        rich_presence_value("InventorySlot", game.inventory.index),
        rich_presence_lookup("InventoryItem", game.storage.GetSelectedItem(), lookups.item),
    rich_presence_value("Time", game.timer.GetTimeInSeconds(), "SECS_AS_MINS")
    )
}


rich_presence_display("Nothing Here")

achievement("test", "Test", points= 1, trigger = game.storage.CollectedItem(0x46))